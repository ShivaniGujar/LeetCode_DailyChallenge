You are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules:

The chosen integers have to be in the range [1, n].
Each integer can be chosen at most once.
The chosen integers should not be in the array banned.
The sum of the chosen integers should not exceed maxSum.
Return the maximum number of integers you can choose following the mentioned rules.

 

Example 1:

Input: banned = [1,6,5], n = 5, maxSum = 6
Output: 2
Explanation: You can choose the integers 2 and 4.
2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum.
Example 2:

Input: banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1
Output: 0
Explanation: You cannot choose any integer while following the mentioned conditions.
Example 3:

Input: banned = [11], n = 7, maxSum = 50
Output: 7
Explanation: You can choose the integers 1, 2, 3, 4, 5, 6, and 7.
They are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum.
 

Constraints:

1 <= banned.length <= 104
1 <= banned[i], n <= 104
1 <= maxSum <= 109

################ Solution 1 with 77% ################
              import java.util.HashSet; // Import the HashSet class from the java.util package
              
              class Solution {
                  public int maxCount(int[] banned, int n, int maxSum) {
                      // Create a HashSet to store all banned numbers for quick lookup
                      HashSet<Integer> set = new HashSet<>();
                      for (int ban : banned) {
                          set.add(ban); // Add each banned number to the set
                      }
              
                      int sum = 0; // Initialize the sum of selected numbers to 0
                      int count = 0; // Initialize the count of selected numbers to 0
              
                      // Iterate over numbers from 1 to n
                      for (int i = 1; i <= n; i++) {
                          // If the number is in the banned set, skip it
                          if (set.contains(i)) 
                              continue;
              
                          // Add the current number to the sum
                          sum += i;
              
                          // If the sum exceeds maxSum, stop the loop
                          if (sum > maxSum)
                              break;
              
                          // Increment the count of selected numbers
                          count++;
                      }
              
                      // Return the total count of numbers selected
                      return count;
                  }
              }

#################################SOution 2 with 100% ###############

class Solution {
    public int maxCount(int[] banned, int n, int maxSum) {
        // Initialize a boolean array to track banned numbers
        // Assuming numbers will not exceed 10,000 based on the problem constraints
        boolean set[] = new boolean[10001];

        // Mark all banned numbers in the boolean array as 'true'
        for (int ban : banned) {
            set[ban] = true; // Mark banned numbers
        }

        int sum = 0;  // Initialize the sum of selected numbers
        int count = 0; // Initialize the count of selected numbers

        // Iterate over numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            // Skip the number if it is banned
            if (set[i] == true) 
                continue;

            // Add the current number to the sum
            sum += i;

            // If the sum exceeds maxSum, terminate the loop
            if (sum > maxSum)
                break;

            // Increment the count of selected numbers
            count++;
        }

        // Return the total count of numbers selected
        return count;
    }
}

